/* tslint:disable */
/* eslint-disable */
/**
 * Demo API
 *  This is a demo app
 *
 * The version of the OpenAPI document:  v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface BusinessDTO
 */
export interface BusinessDTO {
    /**
     * 
     * @type {number}
     * @memberof BusinessDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof BusinessDTO
     */
    'businessName'?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessDTO
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof BusinessDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof BusinessDTO
     */
    'score'?: number;
    /**
     * 
     * @type {number}
     * @memberof BusinessDTO
     */
    'deliveryFees'?: number;
    /**
     * 
     * @type {number}
     * @memberof BusinessDTO
     */
    'miniDeliveryFee'?: number;
    /**
     * 
     * @type {number}
     * @memberof BusinessDTO
     */
    'monthSold'?: number;
}
/**
 * 
 * @export
 * @interface CommodityDTO
 */
export interface CommodityDTO {
    /**
     * 
     * @type {number}
     * @memberof CommodityDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CommodityDTO
     */
    'commodityName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommodityDTO
     */
    'commodityDescription'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommodityDTO
     */
    'image'?: string;
    /**
     * 
     * @type {number}
     * @memberof CommodityDTO
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface FoodTypeDTO
 */
export interface FoodTypeDTO {
    /**
     * 
     * @type {string}
     * @memberof FoodTypeDTO
     */
    'typeName'?: string;
    /**
     * 
     * @type {string}
     * @memberof FoodTypeDTO
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface OrderDTO
 */
export interface OrderDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderDTO
     */
    'payAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderDTO
     */
    'businessName'?: string;
    /**
     * 
     * @type {Array<{ [key: string]: number; }>}
     * @memberof OrderDTO
     */
    'orderItemDTOs'?: Array<{ [key: string]: number; }>;
}
/**
 * 
 * @export
 * @interface OrderItemDTO
 */
export interface OrderItemDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'quanity'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'productName'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemDTO
     */
    'commodityPrice'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemDTO
     */
    'image'?: string;
}
/**
 * 
 * @export
 * @interface OrderTableDTO
 */
export interface OrderTableDTO {
    /**
     * 
     * @type {number}
     * @memberof OrderTableDTO
     */
    'orderId'?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderTableDTO
     */
    'payAmount'?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderTableDTO
     */
    'businessName'?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderTableDTO
     */
    'businessDeliveryFees'?: number;
    /**
     * 
     * @type {Array<OrderItemDTO>}
     * @memberof OrderTableDTO
     */
    'orderItemDTOs'?: Array<OrderItemDTO>;
}
/**
 * 
 * @export
 * @interface UserDTO
 */
export interface UserDTO {
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDTO
     */
    'password'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 商家列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商家商品列表
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommodityList: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCommodityList', 'id', id)
            const localVarPath = `/business/itemList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 食物种类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodTypeList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/foodtype/foodTypeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取已支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayedOrder: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/payedorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取未支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpayOrder: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/unpayorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下订单
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savedOrder: async (orderDTO: OrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('savedOrder', 'orderDTO', orderDTO)
            const localVarPath = `/user/saveorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 商家列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBusinessList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 商家商品列表
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommodityList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommodityDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommodityList(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getCommodityList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 食物种类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoodTypeList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoodTypeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFoodTypeList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getFoodTypeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取已支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayedOrder(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderTableDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayedOrder(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPayedOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取未支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnpayOrder(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderTableDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnpayOrder(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUnpayOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 下订单
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savedOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.savedOrder(orderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.savedOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 商家列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessList(options?: RawAxiosRequestConfig): AxiosPromise<Array<BusinessDTO>> {
            return localVarFp.getBusinessList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商家商品列表
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommodityList(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CommodityDTO>> {
            return localVarFp.getCommodityList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 食物种类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodTypeList(options?: RawAxiosRequestConfig): AxiosPromise<Array<FoodTypeDTO>> {
            return localVarFp.getFoodTypeList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取已支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayedOrder(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderTableDTO>> {
            return localVarFp.getPayedOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取未支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpayOrder(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderTableDTO>> {
            return localVarFp.getUnpayOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下订单
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savedOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.savedOrder(orderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 商家列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBusinessList(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBusinessList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商家商品列表
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCommodityList(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCommodityList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 食物种类列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFoodTypeList(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFoodTypeList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取已支付订单
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPayedOrder(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPayedOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取未支付订单
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUnpayOrder(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUnpayOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 下订单
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public savedOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).savedOrder(orderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 用于获取验证令牌
         * @summary 获取公钥
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/jwk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 用于获取令牌
         * @summary 获取token
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken: async (userDTO: UserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDTO' is not null or undefined
            assertParamExists('getToken', 'userDTO', userDTO)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 创建账户
         * @summary 注册
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userDTO: UserDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDTO' is not null or undefined
            assertParamExists('register', 'userDTO', userDTO)
            const localVarPath = `/user/post`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 用于获取验证令牌
         * @summary 获取公钥
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJwk(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJwk(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getJwk']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 用于获取令牌
         * @summary 获取token
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToken(userDTO: UserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToken(userDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.getToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 创建账户
         * @summary 注册
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userDTO: UserDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 用于获取验证令牌
         * @summary 获取公钥
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJwk(options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getJwk(options).then((request) => request(axios, basePath));
        },
        /**
         * 用于获取令牌
         * @summary 获取token
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToken(userDTO: UserDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getToken(userDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 创建账户
         * @summary 注册
         * @param {UserDTO} userDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userDTO: UserDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.register(userDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 用于获取验证令牌
     * @summary 获取公钥
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getJwk(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getJwk(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 用于获取令牌
     * @summary 获取token
     * @param {UserDTO} userDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getToken(userDTO: UserDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).getToken(userDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 创建账户
     * @summary 注册
     * @param {UserDTO} userDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public register(userDTO: UserDTO, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).register(userDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ControllerApi - axios parameter creator
 * @export
 */
export const ControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 商家列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/business/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 商家商品列表
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommodityList: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCommodityList', 'id', id)
            const localVarPath = `/business/itemList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 食物种类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodTypeList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/foodtype/foodTypeList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取已支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayedOrder: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/payedorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取未支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpayOrder: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/unpayorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 下订单
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savedOrder: async (orderDTO: OrderDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderDTO' is not null or undefined
            assertParamExists('savedOrder', 'orderDTO', orderDTO)
            const localVarPath = `/user/saveorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ControllerApi - functional programming interface
 * @export
 */
export const ControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 商家列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBusinessList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BusinessDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBusinessList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControllerApi.getBusinessList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 商家商品列表
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommodityList(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CommodityDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommodityList(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControllerApi.getCommodityList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 食物种类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFoodTypeList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FoodTypeDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFoodTypeList(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControllerApi.getFoodTypeList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取已支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayedOrder(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderTableDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayedOrder(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControllerApi.getPayedOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取未支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnpayOrder(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderTableDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnpayOrder(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControllerApi.getUnpayOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 下订单
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async savedOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.savedOrder(orderDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ControllerApi.savedOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ControllerApi - factory interface
 * @export
 */
export const ControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary 商家列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessList(options?: RawAxiosRequestConfig): AxiosPromise<Array<BusinessDTO>> {
            return localVarFp.getBusinessList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 商家商品列表
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommodityList(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CommodityDTO>> {
            return localVarFp.getCommodityList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 食物种类列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFoodTypeList(options?: RawAxiosRequestConfig): AxiosPromise<Array<FoodTypeDTO>> {
            return localVarFp.getFoodTypeList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取已支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayedOrder(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderTableDTO>> {
            return localVarFp.getPayedOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取未支付订单
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpayOrder(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrderTableDTO>> {
            return localVarFp.getUnpayOrder(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 下订单
         * @param {OrderDTO} orderDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        savedOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.savedOrder(orderDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ControllerApi - object-oriented interface
 * @export
 * @class ControllerApi
 * @extends {BaseAPI}
 */
export class ControllerApi extends BaseAPI {
    /**
     * 
     * @summary 商家列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public getBusinessList(options?: RawAxiosRequestConfig) {
        return ControllerApiFp(this.configuration).getBusinessList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 商家商品列表
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public getCommodityList(id: number, options?: RawAxiosRequestConfig) {
        return ControllerApiFp(this.configuration).getCommodityList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 食物种类列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public getFoodTypeList(options?: RawAxiosRequestConfig) {
        return ControllerApiFp(this.configuration).getFoodTypeList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取已支付订单
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public getPayedOrder(options?: RawAxiosRequestConfig) {
        return ControllerApiFp(this.configuration).getPayedOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取未支付订单
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public getUnpayOrder(options?: RawAxiosRequestConfig) {
        return ControllerApiFp(this.configuration).getUnpayOrder(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 下订单
     * @param {OrderDTO} orderDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    public savedOrder(orderDTO: OrderDTO, options?: RawAxiosRequestConfig) {
        return ControllerApiFp(this.configuration).savedOrder(orderDTO, options).then((request) => request(this.axios, this.basePath));
    }
}



